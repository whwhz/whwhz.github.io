{"meta":{"title":"Whwhz","subtitle":null,"description":"光孕众生，众生随影。光涤吾魂，影庇吾体。","author":"zwh","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2020-02-12T14:14:36.000Z","updated":"2021-01-07T03:32:10.781Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"姑的小屋 与&nbsp; cungduafa&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"留言板","date":"2020-04-21T12:17:58.000Z","updated":"2021-01-07T03:33:19.065Z","comments":true,"path":"conmment/index.html","permalink":"http://example.com/conmment/index.html","excerpt":"","text":"有什么想说的? 有什么想问的?"},{"title":"分类","date":"2020-04-20T16:00:00.000Z","updated":"2021-01-07T03:31:41.535Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"donate","date":"2020-02-13T15:13:05.000Z","updated":"2021-01-07T03:36:12.888Z","comments":false,"path":"donate/index.html","permalink":"http://example.com/donate/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-13T12:24:16.000Z","updated":"2021-01-07T03:31:54.960Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Nuxt框架使用踩坑","slug":"Nuxt框架使用的一些问题","date":"2021-01-13T09:33:06.000Z","updated":"2021-01-15T10:06:16.184Z","comments":true,"path":"post/61197.html","link":"","permalink":"http://example.com/post/61197.html","excerpt":"","text":"因公司技术栈是 Vue, Web 端业务中使用到了 Nuxtjs, 框架能够很快速的建立 Vue 项目, 能够使用自动化路由和服务端渲染, 此篇记录在 NuxtJs 使用中也遇到的一些问题 NuxtJs: https://www.nuxtjs.cn/guide/installationEnv: node^14.15.4 &nbsp; npm^6.14.10 &nbsp; nuxt^2.14.6 &nbsp; vue^2.6.12 路由嵌套在自动路由中, 要处理嵌套路由需要注意文件位置和文件夹的命名, 文档中也很清楚 根据图示配置二级路由没有问题, 但项目中有这二级菜单嵌套路由的场景, 根据文档中来配置只能同时显示最后一级路由的内容,达不到菜单切换的目的 可以看到, 父 page 并没有一起渲染出来 此时把文件结构修改一下, 可以很方便的达到效果 😈 -| pages/ -| pages/ --| static/ --| static.vue ----| index.vue &gt; &gt; &gt; --| static/ ----| main.vue ----| main.vue 插件使用由于配置开启了 ssr 模式, 所以在直接引入使用一些操作 dom 元素的插件时, 会有 error: window/document is not defined 等等报错, 其实这种问题是由于服务端渲染时不存在 window 对象导致可以在 nuxt.config / plugins引入时设置设置 ssr: false 来解决 但是在我项目中还使用到了 JSEncrypt 这个库来进行数据加密, 上面方法起不到作用,借鉴网络上的方法例如引入前定义 global.window/document/navigator等, 还会有其他意想不到的问题 -_-||, 这些问题都是 Nuxt 的特性导致, 我是采用在加密函数头部进行环境判断来简单应付了一下, 竟然不报错了 😅 (好像还可以通过 node 的 jsdom 来处理) 请求代理/全局样式 在 Nuxt 中想要使用请求代理需要先安装 @nuxtjs/axios || @nuxtjs/proxy 之后再 nuxt.config / modules 进行引入然后配置, 之后的 proxy 就跟 vue 项目中的一样了全局 css 同理, 先引入@nuxtjs/style-resources 之后在 styleResources中引入文件即可, 如果引入 css 预处理器要先进行相应 loader 的安装","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"那些好用的工具函数整理","slug":"那些好用的工具函数整理","date":"2021-01-08T01:15:46.000Z","updated":"2021-01-15T06:48:19.143Z","comments":true,"path":"post/20333.html","link":"","permalink":"http://example.com/post/20333.html","excerpt":"","text":"自己一些日常使用的过的工具函数, 目前分为数据处理类, 时间处理类, 对象类, 验证函数类和浏览器功能类等, 持续更新对象类/** * @param {Object} * @returns {JSON} */ const stringify = (() => { const replacer = (key, val) => { if(typeof val === 'symbol') { return val.toString(); } if(val instanceof Set) { return Array.from(val); } if(val instanceof Map) { return Array.from(val.entries()); } if(typeof val === 'function') { return val.toString(); } return val; } return (obj, spaces = 0) => JSON.stringify(obj, replacer, spaces) })(); /** * @param {Object|Array} 用于检测对象或数组是否为空 * @returns {Boolean} */ export function isEmpty(x) { if(Array.isArray(x) || typeof x === 'string' || x instanceof String ) { return x.length === 0; } if(x instanceof Map || x instanceof Set) { return x.size === 0; } if(({}).toString.call(x) === '[object Object]') { return Object.keys(x).length === 0; } return false; } /** * @param {Object} 一般JSON.parse(JSON.stringify(obj))不能满足就用得到 * @returns {Object} */ export function deepClone(source) { if (!source && typeof source !== 'object') { throw new Error('error arguments', 'deepClone') } const targetObj = source.constructor === Array ? [] : {} Object.keys(source).forEach(keys => { if (source[keys] && typeof source[keys] === 'object') { targetObj[keys] = deepClone(source[keys]) } else { targetObj[keys] = source[keys] } }) return targetObj } /** * @param {Object} target * @param {(Object|Array)} 第二个参数可以是包含多个对象的数组 * @returns {Object} */ export function objectMerge(target, source) { if (typeof target !== 'object') { target = {} } if (Array.isArray(source)) { return source.slice() } Object.keys(source).forEach(property => { const sourceProperty = source[property] if (typeof sourceProperty === 'object') { target[property] = objectMerge(target[property], sourceProperty) } else { target[property] = sourceProperty } }) return target } 时间类/** * Parse the time to string * @param {(Object|string|number)} time * @param {string} cFormat * @returns {string | null} */ export function parseTime(time, cFormat) { if (arguments.length === 0) { return null } const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}' let date if (typeof time === 'object') { date = time } else { if ((typeof time === 'string') && (/^[0-9]+$/.test(time))) { time = parseInt(time) } if ((typeof time === 'number') && (time.toString().length === 10)) { time = time * 1000 } date = new Date(time) } const formatObj = { y: date.getFullYear(), m: date.getMonth() + 1, d: date.getDate(), h: date.getHours(), i: date.getMinutes(), s: date.getSeconds(), a: date.getDay() } const time_str = format.replace(/{([ymdhisa])+}/g, (result, key) => { const value = formatObj[key] // Note: getDay() returns 0 on Sunday if (key === 'a') { return ['日', '一', '二', '三', '四', '五', '六'][value ] } return value.toString().padStart(2, '0') }) return time_str } /** * @param {number} time * @param {string} option 需要结合上面的函数一起使用 * @returns {string} */ export function formatTime(time, option) { if (('' + time).length === 10) { time = parseInt(time) * 1000 } else { time = +time } const d = new Date(time) const now = Date.now() const diff = (now - d) / 1000 if (diff < 30) { return '刚刚' } else if (diff < 3600) { // less 1 hour return Math.ceil(diff / 60) + '分钟前' } else if (diff < 3600 * 24) { return Math.ceil(diff / 3600) + '小时前' } else if (diff < 3600 * 24 * 2) { return '1天前' } if (option) { return parseTime(time, option) } else { return ( d.getMonth() + 1 + '月' + d.getDate() + '日' + d.getHours() + '时' + d.getMinutes() + '分' ) } } 数据类/** * @param {Array|Object} list * @param {func} cb 回调函数 */ export function forEach(list, callback) { const entries = Object.entries(list); let i = 0; const len = entries.length; for(;i < len; i++) { const res = callback(entries[i][1], entries[i][0], list); if(res === true) break; } } export const isOfType = (() => { // create a plain object with no prototype const type = Object.create(null); // check for null type type.null = x => x === null; // check for undefined type type.undefined = x => x === undefined; // check for nil type. Either null or undefined type.nil = x => type.null(x) || type.undefined(x); // check for strings and string literal type. e.g: 's', \"s\", `str`, new String() type.string = x => !type.nil(x) && (typeof x === 'string' || x instanceof String); // check for number or number literal type. e.g: 12, 30.5, new Number() type.number = x => !type.nil(x) && (// NaN & Infinity have typeof \"number\" and this excludes that (!isNaN(x) && isFinite(x) && typeof x === 'number' ) || x instanceof Number); // check for boolean or boolean literal type. e.g: true, false, new Boolean() type.boolean = x => !type.nil(x) && (typeof x === 'boolean' || x instanceof Boolean); // check for array type type.array = x => !type.nil(x) && Array.isArray(x); // check for object or object literal type. e.g: {}, new Object(), Object.create(null) type.object = x => ({}).toString.call(x) === '[object Object]'; // check for provided type instance type.type = (x, X) => !type.nil(x) && x instanceof X; // check for set type type.set = x => type.type(x, Set); // check for map type type.map = x => type.type(x, Map); // check for date type type.date = x => type.type(x, Date); return type; })(); /** * @returns {string} */ export function createUniqueString() { const timestamp = +new Date() + '' const randomNum = parseInt((1 + Math.random()) * 65536) + '' return (+(randomNum + timestamp)).toString(32) } /** * @param {string} url * @returns {Object} */ export function getQueryObject(url) { url = url == null ? window.location.href : url const search = url.substring(url.lastIndexOf('?') + 1) const obj = {} const reg = /([^?&=]+)=([^?&=]*)/g search.replace(reg, (rs, $1, $2) => { const name = decodeURIComponent($1) let val = decodeURIComponent($2) val = String(val) obj[name] = val return rs }) return obj } 验证类/* * @param {String} 身份证号 * @returns {Boolean} */ export const certNoValidate = certNo => { if (certNo) { // 加权因子 const weight_factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]; // 校验码 const check_code = [\"1\", \"0\", \"X\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"]; let code = certNo + \"\"; let last = certNo[17]; //最后一个 let seventeen = code.substring(0, 17); let arr = seventeen.split(\"\"); let len = arr.length; let num = 0; for (let i = 0; i < len; i++) { num = num + arr[i] * weight_factor[i]; } let resisue = num % 11; let last_no = check_code[resisue]; const newReg = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0|1][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/; let format = newReg.test(certNo); if (last_no && format) { return true; } else { return false; } } else { return false; } }; /* * @param {String} 只适合国内手机, 海外目前没接触 * @returns {Boolean} */ export const mobileValidate = mobile => { const newReg = /^1(3|4|5|6|7|8|9)\\d{9}$/; if (newReg.test(mobile)) { return true; } else { return false; } }; /* * @param {String} 至少6位的字母数字组合 * @returns {Boolean} */ export const pwdValidate = pwd => { const reg = /(?=.*?[a-zA-Z])(?=.*?[0-9])[a-zA-Z0-9]{6,}$/; if (reg.test(pwd)) { return true; } else { return false; } }; 浏览器类/* 相较于a标签直接下载可以附加参数, 可以用于权限控制中的请求下载 * @param {String} 文件url * @param {Object} 请求参数 * @returns Null */ export function downloadFile(downLoadurl, params = {}, method = \"get\") { // params = { ...params, token: store.getters.token }; const downloadForm = document.createElement(\"form\"); try { if (downloadForm) { // downloadForm.action = 'http://192.168.1.108:9001' + downLoadurl downloadForm.action = downLoadurl; downloadForm.method = method; for (const key in params) { if (!params[key]) continue; const input = document.createElement(\"input\"); input.type = \"hidden\"; input.name = key; input.value = params[key]; downloadForm.appendChild(input); } // downloadForm.headers = { // token: store.getters.token // }; document.body.appendChild(downloadForm); downloadForm.submit(); } } catch (e) { console.log(e); } finally { document.body.removeChild(downloadForm); } } /** * Add class to element * @param {HTMLElement} elm * @param {string} cls */ export function addClass(ele, cls) { if (!hasClass(ele, cls)) ele.className += ' ' + cls } /** * Remove class from element * @param {HTMLElement} elm * @param {string} cls */ export function removeClass(ele, cls) { if (hasClass(ele, cls)) { const reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)') ele.className = ele.className.replace(reg, ' ') } } /** * @param {HTMLElement} elm * @param {string} cls * @returns {boolean} */ export function hasClass(ele, cls) { return !!ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)')) } /** * @param {HTMLElement} element * @param {string} className */ export function toggleClass(element, className) { if (!element || !className) { return } let classString = element.className const nameIndex = classString.indexOf(className) if (nameIndex === -1) { classString += '' + className } else { classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length) } element.className = classString } /* base64转file * @param {file} * @returns {base64} */ function dataURLtoFile(base64) { let arr = base64.split(\",\"), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n); while (n--) { u8arr[n] = bstr.charCodeAt(n); } return new File([u8arr], { type: mime }); } /* base64转二进制 * @param {String} “data:image/png;base64,****”,逗号之前都是一些说明性的文字，我们只需要逗号之后的就行了 * @returns {blob} */ function dataToBlob(data, mime) { data = data.split(',')[1] data = window.atob(data) var ia = new Uint8Array(data.length) for (var i = 0; i < data.length; i++) { ia[i] = data.charCodeAt(i) } // canvas.toDataURL 返回的默认格式就是 image/png return new Blob([ia], { type: mime }) } /* 压缩图片 * @param {file} * @returns {base64} */ export function compressImg(file) { let src; let fileSize = parseFloat(parseInt(file[\"size\"]) / 1024 / 1024).toFixed(2); let read = new FileReader(); read.readAsDataURL(file); return new Promise(function(resolve, reject) { read.onload = function(e) { let img = new Image(); img.src = e.target.result; img.onload = function() { //默认按比例压缩 let w = this.width, h = this.height; //生成canvas let canvas = document.createElement(\"canvas\"); let ctx = canvas.getContext(\"2d\"); let base64; // 创建属性节点 canvas.setAttribute(\"width\", w); canvas.setAttribute(\"height\", h); ctx.drawImage(this, 0, 0, w, h); if (fileSize < 1) { //如果图片小于一兆 那么不执行压缩操作 base64 = canvas.toDataURL(file[\"type\"], 1); } else if (fileSize > 1 && fileSize < 2) { //如果图片大于1M并且小于2M 那么压缩0.5 base64 = canvas.toDataURL(file[\"type\"], 0.5); } else { //如果图片超过2m 那么压缩0.2 base64 = canvas.toDataURL(file[\"type\"], 0.2); } // 这里返回的是base64编码 如果想要文件格式还需要再次转换 resolve(base64); }; }; }); } WIDGET = { CONFIG: { \"modules\": \"0124\", \"background\": 1, \"tmpColor\": \"FFFFFF\", \"tmpSize\": 16, \"cityColor\": \"FFFFFF\", \"citySize\": 16, \"aqiSize\": 16, \"weatherIconSize\": 24, \"alertIconSize\": 18, \"padding\": \"10px 10px 10px 10px\", \"shadow\": \"1\", \"language\": \"auto\", \"borderRadius\": 5, \"fixed\": \"false\", \"vertical\": \"middle\", \"horizontal\": \"center\", \"key\": \"B1Dc3JIvYg\" } }","categories":[],"tags":[]},{"title":"ones","slug":"ones","date":"2021-01-07T08:55:18.000Z","updated":"2021-01-07T10:01:55.632Z","comments":true,"path":"post/31766.html","link":"","permalink":"http://example.com/post/31766.html","excerpt":"","text":"光影教会光影会 光影会推动三大法则的执行 光影会维护了灯塔秩序 光影会给灯塔带来了信仰 撇开最高统治者的罪行 光影之主 我们自以为可以超越神明 均是从墙上投射下来的影子 晨光庇佑，光孕众生。众生随影。以道制欲，乐而不淫。宁残体肤，不弃光影 咕咕咕, 我在","categories":[],"tags":[{"name":"一","slug":"一","permalink":"http://example.com/tags/%E4%B8%80/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-01-07T03:03:33.015Z","updated":"2021-01-07T03:28:22.540Z","comments":true,"path":"post/16107.html","link":"","permalink":"http://example.com/post/16107.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment WIDGET = { CONFIG: { \"modules\": \"0124\", \"background\": 1, \"tmpColor\": \"FFFFFF\", \"tmpSize\": 16, \"cityColor\": \"FFFFFF\", \"citySize\": 16, \"aqiSize\": 16, \"weatherIconSize\": 24, \"alertIconSize\": 18, \"padding\": \"10px 10px 10px 10px\", \"shadow\": \"1\", \"language\": \"auto\", \"borderRadius\": 5, \"fixed\": \"false\", \"vertical\": \"middle\", \"horizontal\": \"center\", \"key\": \"B1Dc3JIvYg\" } }","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"一","slug":"一","permalink":"http://example.com/tags/%E4%B8%80/"}]}